{"version":3,"sources":["components/ContactForm/ContactForm.module.scss","components/ContactItem/ContactItem.module.scss","components/ContactList/ContactList.module.scss","components/Button/Button.module.scss","components/Container/Container.jsx","redux/contacts/contact-actions.js","redux/contacts/contact-operations.js","redux/contacts/contact-selectors.js","components/Button/Button.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","App.js","redux/contacts/contact-reducers.js","redux/store.js","index.js"],"names":["module","exports","useStyles","createUseStyles","container","padding","width","margin","left","top","right","bottom","backgroundColor","Container","children","classes","className","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","default","baseUrl","getContacts","state","contacts","items","getFilter","filter","getVisibleContacts","normalizedFilter","toLowerCase","name","includes","Button","type","styles","button","ContactForm","useState","setName","number","setNumber","useSelector","dispatch","useDispatch","handleChange","target","value","reset","onSubmit","e","preventDefault","find","contact","alert","post","then","data","catch","error","addContact","form","formLabel","formInput","onChange","autoComplete","label","display","flexDirection","fontSize","marginBottom","fontWeight","input","marginTop","maxWidth","height","outline","textAlign","border","borderRadius","Filter","event","contactsActions","ContactItem","id","deleteButton","onClick","delete","deleteContact","ContactList","list","map","listItem","App","itemsReducer","createReducer","_","action","payload","filterReducer","LoadingReducer","contactsReducer","combineReducers","loading","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6a1e4a40.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3_y-q\",\"formLabel\":\"ContactForm_formLabel__nXao5\",\"formInput\":\"ContactForm_formInput__2XsKX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"name\":\"ContactItem_name__22occ\",\"number\":\"ContactItem_number__3_AoW\",\"deleteButton\":\"ContactItem_deleteButton__2WrBe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__Aiw6m\",\"listItem\":\"ContactList_listItem__1Z41c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__1ARKH\"};","import PropTypes from 'prop-types';\r\nimport { createUseStyles } from 'react-jss';\r\n\r\nconst useStyles = createUseStyles({\r\n  container:{\r\n    padding: '30px',\r\n  width: '400px',\r\n    margin:{\r\n  left:'auto',\r\n  top: '40px',\r\n  right: 'auto', \r\n  bottom: '40px'\r\n},\r\n    backgroundColor: '#ece6f2 '\r\n  }\r\n\r\n})\r\n\r\nconst Container = ({ children }) => {\r\n    const classes = useStyles();\r\n    return <div className={classes.container}>{children}</div>;\r\n}\r\n\r\nContainer.propTypes = {\r\n    children: PropTypes.node,\r\n};\r\n\r\nexport default Container","import { createAction } from '@reduxjs/toolkit';\r\n// import shortid from 'shortid';\r\n\r\nexport const fetchContactsRequest = createAction('contacts/fetchContactRequest');\r\nexport const fetchContactsSuccess = createAction('contacts/fetchContactSuccess');\r\nexport const fetchContactsError = createAction('contacts/fetchContactRequest');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactRequest');\r\n\r\nexport const deleteContactRequest = createAction('contacts/deleteContactRequest');\r\nexport const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\r\nexport const deleteContactError = createAction('contacts/deleteContactRequest');\r\n\r\nexport const changeFilter = createAction('contacts/changeFilter');\r\n\r\n\r\n// export const addContact = createAction('contacts/add', (name, number) => ({\r\n//     payload: {\r\n//         id: shortid.generate(),\r\n//         name,\r\n//         number,\r\n//     },\r\n// }));\r\n\r\n// export const   addContact = ({ name, number }) => ({\r\n//   type: types.ADD,\r\n//   payload: {\r\n//     id: shortid.generate(),\r\n//     name,\r\n//     number,\r\n// }\r\n// });\r\n\r\n// export const deleteContact = createAction('contacts/delete');\r\n\r\n// export const deleteContact = (id) => ({\r\n//   type: types.DELETE,\r\n//   payload: id,\r\n// });\r\n\r\n// export const changeFilter = createAction('contacts/changeFilter');\r\n\r\n// export const changeFilter = value => ({\r\n//   type: 'CHANGE_FILTER',\r\n//   payload: value,\r\n// });\r\n\r\n\r\n// const contactsActions = { addContact, deleteContact, changeFilter };\r\n// export default contactsActions;","import axios from 'axios';\r\nimport {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError\r\n} from './contact-actions';\r\n\r\n\r\naxios.default.baseUrl = 'http://localhost:4040';\r\n\r\n\r\nexport const fetchContacts = () => dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n  axios\r\n  .get('/contacts')\r\n  .then(({data}) => dispatch(fetchContactsSuccess(data)))\r\n  .catch(error => dispatch(fetchContactsError(error)))\r\n}\r\n\r\nexport const addContact = (name, number) => dispatch => {\r\n  const contact = {name, number,};\r\n  dispatch(addContactRequest());\r\n  axios\r\n  .post('/contacts', contact)\r\n  .then(({data}) => dispatch(addContactSuccess(data)))\r\n  .catch(error => dispatch(addContactError(error)))\r\n};\r\n\r\nexport const deleteContact = id => dispatch => {\r\n  dispatch(deleteContactRequest());\r\n  axios\r\n  .delete(`/contacts/${id}`)\r\n  .then(({id}) => dispatch(deleteContactSuccess(id)))\r\n  .catch(error => dispatch(deleteContactError(error)))\r\n}\r\n","export const getContacts = state => state.contacts.items;\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nexport const getVisibleContacts = state => {\r\n    const contacts = getContacts(state);\r\n    const filter = getFilter(state);\r\n\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return contacts.filter(({ name }) =>\r\n        name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n};","import React from 'react';\nimport styles from './Button.module.scss';\n\nconst Button = () => {\n  return (\n    <button type='submit' className={styles.button}>\n      Add contact\n    </button>\n  )\n};\n\nexport default Button;","import { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n// import { connect } from 'react-redux';\r\n\r\nimport styles from './ContactForm.module.scss';\r\nimport {addContact} from '../../redux/contacts/contact-operations';\r\n// import * as contactsActions from '../../redux/contacts/contact-actions';\r\nimport { getContacts } from '../../redux/contacts/contact-selectors';\r\nimport Button from '../Button';\r\n\r\n\r\nexport default function ContactForm() {\r\n    const [name, setName] = useState('');\r\n    const [number, setNumber] = useState('');\r\n    const contacts = useSelector(getContacts);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleChange = ({ target }) => {\r\n        const { name, value } = target;\r\n\r\n        switch (name) {\r\n            case 'name':\r\n                setName(value);\r\n                break;\r\n\r\n            case 'number':\r\n                setNumber(value);\r\n                break;\r\n\r\n            default:\r\n                return;\r\n        }\r\n    };\r\n\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        if (name === '') {\r\n          alert(`Enter name`);\r\n          return;\r\n        }\r\n    \r\n        if (number === '') {\r\n          alert(`Enter number`);\r\n          return;\r\n        }\r\n    \r\n        if (contacts.find(contact => contact.name === name)) {\r\n          alert(`${name} is already in contacts.`);\r\n          reset();\r\n          return;\r\n        }\r\n    \r\n        dispatch(addContact(name, number));\r\n        reset();\r\n      };\r\n    \r\n      const reset = () => {\r\n        setName('');\r\n        setNumber('');\r\n      };\r\n\r\n  \r\n    return (\r\n        <form onSubmit={handleSubmit} className={styles.form}>\r\n            <label className={styles.formLabel}>\r\n                Name\r\n                <input\r\n                    type=\"text\"\r\n                    className={styles.formInput}\r\n                    name=\"name\"\r\n                    value={name}\r\n                    onChange={handleChange}\r\n                    autoComplete=\"off\"\r\n                />\r\n            </label>\r\n            <label className={styles.formLabel}>\r\n                Number\r\n                <input\r\n                    type=\"tel\"\r\n                    className={styles.formInput}\r\n                    name=\"number\"\r\n                    value={number}\r\n                    onChange={handleChange}\r\n                    autoComplete=\"off\"\r\n                />\r\n            </label>\r\n            <Button />\r\n        </form>\r\n    );\r\n}\r\n\r\n\r\n// const mapStateToProps = state => ({\r\n//     contactsItems: state.contacts.items,\r\n// });\r\n\r\n// const mapDispatchToProps = dispatch => {\r\n//     return {\r\n//         onSubmit: ({ name, number }) => dispatch(handleSubmit({ name, number }))\r\n//     }\r\n// };","import { useSelector, useDispatch } from 'react-redux';\r\nimport * as contactsActions from '../../redux/contacts/contact-actions';\r\n// import { connect } from 'react-redux';\r\n// import styles from './Filter.module.scss';\r\nimport { getFilter } from '../../redux/contacts/contact-selectors';\r\nimport {createUseStyles} from 'react-jss'\r\n\r\nconst useStyles = createUseStyles({\r\n    label: {\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      fontSize: 17,\r\n      marginBottom: 15,\r\n      fontWeight: 500,\r\n    },\r\n    \r\n    input: {\r\n      padding: 2,\r\n      marginTop: 5,\r\n      maxWidth: 190,\r\n      height: 30,\r\n      outline: 'none',\r\n    textAlign: 'center',\r\n      border: ['1px', 'solid', 'gray'],\r\n      borderRadius: 5,\r\n    }\r\n  \r\n  })\r\n\r\n\r\nconst Filter = () => {\r\n    const classes = useStyles();\r\n    const value = useSelector(getFilter);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <label className={classes.label}>\r\n            Find contacts by name\r\n            <input\r\n                type=\"text\"\r\n                className={classes.input}\r\n                value={value}\r\n                onChange={event =>\r\n                    dispatch(contactsActions.changeFilter(event.target.value))\r\n                }\r\n                autoComplete=\"off\"\r\n            />\r\n        </label>\r\n    );\r\n};\r\n\r\nexport default Filter;\r\n\r\n\r\n\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n\r\n// const mapStateToProps = state => ({\r\n//     value: state.contacts.filter,\r\n// })\r\n\r\n// const mapDispatchToProps = dispatch => {\r\n//     return {\r\n//         onChange: (e) => dispatch(chengeFilter(e.currentTarget.value)),\r\n//     }\r\n// }","import { useDispatch } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n// import { connect } from 'react-redux';\r\n// import * as contactsActions from '../../redux/contacts/contact-actions';\r\nimport {deleteContact} from '../../redux/contacts/contact-operations';\r\n\r\n\r\nimport styles from './ContactItem.module.scss';\r\n\r\n\r\n\r\nconst ContactItem = ({ name, number, id }) => {\r\n\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <>\r\n           \r\n            <span className={styles.name}>{name}:</span>\r\n            <span className={styles.number}>{number}</span>\r\n            <button\r\n                type=\"button\"\r\n                className={styles.deleteButton}\r\n                onClick={() => dispatch(deleteContact(id))}\r\n            >\r\n                Delete\r\n            </button>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ContactItem;\r\n\r\nContactItem.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    number: PropTypes.string.isRequired,\r\n    id: PropTypes.string.isRequired,\r\n};\r\n\r\n\r\n// const mapDispatchToProps = dispatch => {\r\n//     return {\r\n//         onDeleteContact: id => dispatch(deleteContact(id))\r\n//     }\r\n// };","import { useSelector } from 'react-redux';\r\nimport { getVisibleContacts } from '../../redux/contacts/contact-selectors';\r\nimport ContactItem from '../ContactItem';\r\n// import { connect } from 'react-redux';\r\n\r\nimport styles from './ContactList.module.scss';\r\n\r\n\r\n\r\n\r\nconst ContactList = () => {\r\n    \r\n    const contacts = useSelector(getVisibleContacts);\r\n    \r\n    return (\r\n        <ul className={styles.list}>\r\n            {contacts.map(({ id, name, number }) => (\r\n                <li key={id} className={styles.listItem}>\r\n                    <ContactItem name={name} number={number} id={id} />\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default ContactList;\r\n\r\n\r\n\r\n\r\n// export default connect(mapStateToProps)(ContactList);\r\n\r\n// const mapStateToProps = ({ contacts: { items, filter } }) => ({\r\n//     contacts: getVisibleContacts(items, filter),\r\n// });","import Container from './components/Container';\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\nimport ContactList from './components/ContactList';\n\nconst App = () => (\n    <Container>\n        <h1>Phonebook</h1>\n        <ContactForm />\n\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList />\n    </Container>\n);\n\nexport default App;","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n// import * as contactsActions from './contact-actions';\r\nimport {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  changeFilter\r\n} from './contact-actions';\r\n\r\n\r\nconst initialState = [];\r\n\r\nconst itemsReducer = createReducer(initialState, {\r\n    [fetchContactsSuccess]: (_, action) => action.payload,\r\n    [addContactSuccess]: (state, { payload }) => [payload, ...state],\r\n    [deleteContactSuccess]: (state, { payload }) =>\r\n        state.filter(({ id }) => id !== payload),\r\n});\r\n\r\n\r\nconst filterReducer = createReducer('', {\r\n    [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst LoadingReducer = createReducer(false, {\r\n    [fetchContactsRequest]: () => true,\r\n    [fetchContactsSuccess]: () => false,\r\n    [fetchContactsError]: () => false,\r\n    [addContactRequest]: () => true,\r\n    [addContactSuccess]: () => false,\r\n    [addContactError]: () => false,\r\n    [deleteContactRequest]: () => true,\r\n    [deleteContactSuccess]: () => false,\r\n    [deleteContactError]: () => false,\r\n})\r\n\r\n\r\n\r\nconst contactsReducer = combineReducers({\r\n    items: itemsReducer,\r\n    filter: filterReducer,\r\n    loading: LoadingReducer,\r\n});\r\n\r\nexport default contactsReducer;","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER,\r\n} from 'redux-persist';\r\nimport contactsReducer from './contacts/contact-reducers';\r\n\r\n// const contactsPersistConfig = {\r\n//     key: 'rootReducer',\r\n//     storage,\r\n//     blacklist: ['filter'],\r\n// };\r\n\r\nconst middleware = [\r\n    ...getDefaultMiddleware({\r\n        serializableCheck: {\r\n            ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n        },\r\n    }),\r\n    logger,\r\n];\r\n\r\n\r\n\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        contacts:  contactsReducer\r\n        },\r\n    middleware,\r\n    devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\n// const persistor = persistStore(store);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport './index.css';\nimport App from './App';\nimport store from './redux/store';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            {/* <PersistGate loading={null} persistor={persistor}> */}\n                <App />\n            {/* </PersistGate> */}\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);"],"sourceRoot":""}