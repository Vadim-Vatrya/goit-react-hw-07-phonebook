{"version":3,"sources":["components/ContactForm/ContactForm.module.scss","components/ContactItem/ContactItem.module.scss","components/ContactList/ContactList.module.scss","components/Button/Button.module.scss","components/Loader/Loader.module.scss","redux/contacts/contact-selectors.js","redux/contacts/contact-actions.js","redux/contacts/contact-operations.js","components/Container/Container.jsx","components/Button/Button.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Loader/Loader.jsx","App.js","redux/contacts/contact-reducers.js","redux/store.js","index.js"],"names":["module","exports","getContacts","state","contacts","items","getFilter","filter","getLoading","loading","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","name","includes","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","useStyles","createUseStyles","container","padding","width","margin","left","top","right","bottom","backgroundColor","Container","children","classes","className","Button","type","styles","button","ContactForm","useState","setName","number","setNumber","useSelector","dispatch","useDispatch","handleChange","target","value","reset","onSubmit","e","preventDefault","find","contact","alert","post","then","data","catch","error","form","formLabel","formInput","onChange","autoComplete","label","display","flexDirection","fontSize","marginBottom","fontWeight","input","marginTop","maxWidth","height","outline","textAlign","border","borderRadius","Filter","event","contactsActions","ContactItem","id","deleteButton","onClick","delete","deleteContact","ContactList","list","map","listItem","LoaderContacts","color","timeout","App","useEffect","get","Loader","length","itemsReducer","createReducer","_","payload","filterReducer","action","trim","LoadingReducer","contactsReducer","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.25d04bcf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3_y-q\",\"formLabel\":\"ContactForm_formLabel__nXao5\",\"formInput\":\"ContactForm_formInput__2XsKX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"name\":\"ContactItem_name__22occ\",\"number\":\"ContactItem_number__3_AoW\",\"deleteButton\":\"ContactItem_deleteButton__2WrBe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__Aiw6m\",\"listItem\":\"ContactList_listItem__1Z41c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__1ARKH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading\":\"Loader_loading__31mQY\"};","  \r\nimport { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const getContacts = state => state.contacts.items;\r\nexport const getFilter = state => state.contacts.filter;\r\nexport const getLoading = state => state.contacts.loading;\r\n\r\n// export const getVisibleContacts = state => {\r\n//     const contacts = getContacts(state);\r\n//     const filter = getFilter(state);\r\n\r\n//     const normalizedFilter = filter.toLowerCase();\r\n//     return contacts.filter(({ name }) =>\r\n//         name.toLowerCase().includes(normalizedFilter),\r\n//     );\r\n// };\r\n\r\n// export const getVisibleContacts = createSelector(\r\n//   [getContacts, getFilter],\r\n//   (сontacts, filter) => {\r\n//     const normalizedFilter = filter.toLowerCase();\r\n//     return contacts.filter(contact =>\r\n//       contact.name.toLowerCase().includes(normalizedFilter),\r\n//     );\r\n//   },\r\n// );\r\n\r\nexport const getVisibleContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return contacts.filter(({ name }) => name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  },\r\n);","import { createAction } from '@reduxjs/toolkit';\r\n\r\n\r\nexport const fetchContactsRequest = createAction('contacts/fetchContactRequest');\r\nexport const fetchContactsSuccess = createAction('contacts/fetchContactSuccess');\r\nexport const fetchContactsError = createAction('contacts/fetchContactRequest');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactRequest');\r\n\r\nexport const deleteContactRequest = createAction('contacts/deleteContactRequest');\r\nexport const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\r\nexport const deleteContactError = createAction('contacts/deleteContactRequest');\r\n\r\nexport const changeFilter = createAction('contacts/changeFilter');\r\n","import axios from 'axios';\r\n// import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError\r\n} from './contact-actions';\r\n\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\n\r\nexport const fetchContacts = () => dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n    .catch(error => dispatch(fetchContactsError(error)));\r\n};\r\n\r\n\r\nexport const addContact = contact => dispatch => {\r\n  dispatch(addContactRequest());\r\n\r\n  axios\r\n    .post('/contacts', contact)\r\n    .then(({ data }) => dispatch(addContactSuccess(data)))\r\n    .catch(error => dispatch(addContactError(error)));\r\n};\r\n\r\n\r\nexport const deleteContact = id => dispatch => {\r\n  dispatch(deleteContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(deleteContactSuccess(id)))\r\n    .catch(error => dispatch(deleteContactError(error)));\r\n};\r\n\r\n\r\n\r\n// export const fetchContacts = createAsyncThunk(\r\n//   'contacts/fetchContacts',\r\n//   async (_, { rejectWithValue }) => {\r\n//       try {\r\n//           const { data } = await axios.get('/contacts');\r\n//           return data;\r\n//       } catch (error) {\r\n//           return rejectWithValue(error);\r\n//       }\r\n//   },\r\n// );\r\n\r\n// export const addContact = createAsyncThunk(\r\n//   'contacts/addContact',\r\n//   async (contact, { rejectWithValue }) => {\r\n//       try {\r\n//           const { data } = await axios.post('/contacts', contact);\r\n//           return data;\r\n//       } catch (error) {\r\n//           return rejectWithValue(error);\r\n//       }\r\n//   },\r\n// );\r\n\r\n// export const deleteContact = createAsyncThunk(\r\n//   'contacts/deleteContact',\r\n//   async (contactId, { rejectWithValue }) => {\r\n//       try {\r\n//           await axios.delete(`/contacts/${contactId}`);\r\n//           return contactId;\r\n//       } catch (error) {\r\n//           return rejectWithValue(error);\r\n//       }\r\n//   },\r\n// );\r\n","import PropTypes from 'prop-types';\r\nimport { createUseStyles } from 'react-jss';\r\n\r\nconst useStyles = createUseStyles({\r\n  container:{\r\n    padding: '30px',\r\n  width: '400px',\r\n    margin:{\r\n  left:'auto',\r\n  top: '40px',\r\n  right: 'auto', \r\n  bottom: '40px'\r\n},\r\n    backgroundColor: '#ece6f2 '\r\n  }\r\n\r\n})\r\n\r\nconst Container = ({ children }) => {\r\n    const classes = useStyles();\r\n    return <div className={classes.container}>{children}</div>;\r\n}\r\n\r\nContainer.propTypes = {\r\n    children: PropTypes.node,\r\n};\r\n\r\nexport default Container","import React from 'react';\nimport styles from './Button.module.scss';\n\nconst Button = () => {\n  return (\n    <button type='submit' className={styles.button}>\n      Add contact\n    </button>\n  )\n};\n\nexport default Button;","import { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n// import { connect } from 'react-redux';\r\n\r\nimport styles from './ContactForm.module.scss';\r\nimport {addContact} from '../../redux/contacts/contact-operations';\r\nimport { getContacts } from '../../redux/contacts/contact-selectors';\r\nimport Button from '../Button';\r\n\r\nexport default function ContactForm() {\r\n    const [name, setName] = useState('');\r\n    const [number, setNumber] = useState('');\r\n    const contacts = useSelector(getContacts);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleChange = ({ target }) => {\r\n        const { name, value } = target;\r\n\r\n        switch (name) {\r\n            case 'name':\r\n                setName(value);\r\n                break;\r\n\r\n            case 'number':\r\n                setNumber(value);\r\n                break;\r\n\r\n            default:\r\n                return;\r\n        }\r\n    };\r\n\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        if (name === '') {\r\n          alert(`Enter name`);\r\n          return;\r\n        }\r\n    \r\n        if (number === '') {\r\n          alert(`Enter number`);\r\n          return;\r\n        }\r\n    \r\n        if (contacts.find(contact => contact.name === name)) {\r\n          alert(`${name} is already in contacts.`);\r\n          reset();\r\n          return;\r\n        }\r\n    \r\n        dispatch(addContact(name, number));\r\n        reset();\r\n      };\r\n    \r\n      const reset = () => {\r\n        setName('');\r\n        setNumber('');\r\n      };\r\n\r\n  \r\n    return (\r\n        <form onSubmit={handleSubmit} className={styles.form}>\r\n            <label className={styles.formLabel}>\r\n                Name\r\n                <input\r\n                    type=\"text\"\r\n                    className={styles.formInput}\r\n                    name=\"name\"\r\n                    value={name}\r\n                    onChange={handleChange}\r\n                    autoComplete=\"off\"\r\n                />\r\n            </label>\r\n            <label className={styles.formLabel}>\r\n                Number\r\n                <input\r\n                    type=\"tel\"\r\n                    className={styles.formInput}\r\n                    name=\"number\"\r\n                    value={number}\r\n                    onChange={handleChange}\r\n                    autoComplete=\"off\"\r\n                />\r\n            </label>\r\n            <Button />\r\n        </form>\r\n    );\r\n}\r\n\r\n\r\n// const mapStateToProps = state => ({\r\n//     contactsItems: state.contacts.items,\r\n// });\r\n\r\n// const mapDispatchToProps = dispatch => {\r\n//     return {\r\n//         onSubmit: ({ name, number }) => dispatch(handleSubmit({ name, number }))\r\n//     }\r\n// };","import { useSelector, useDispatch } from 'react-redux';\r\nimport * as contactsActions from '../../redux/contacts/contact-actions';\r\n// import { connect } from 'react-redux';\r\n// import styles from './Filter.module.scss';\r\nimport { getFilter } from '../../redux/contacts/contact-selectors';\r\nimport {createUseStyles} from 'react-jss'\r\n\r\nconst useStyles = createUseStyles({\r\n    label: {\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      fontSize: 17,\r\n      marginBottom: 15,\r\n      fontWeight: 500,\r\n    },\r\n    \r\n    input: {\r\n      padding: 2,\r\n      marginTop: 5,\r\n      maxWidth: 190,\r\n      height: 30,\r\n      outline: 'none',\r\n    textAlign: 'center',\r\n      border: ['1px', 'solid', 'gray'],\r\n      borderRadius: 5,\r\n    }\r\n  \r\n  })\r\n\r\n\r\nconst Filter = () => {\r\n    const classes = useStyles();\r\n    const value = useSelector(getFilter);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <label className={classes.label}>\r\n            Find contacts by name\r\n            <input\r\n                type=\"text\"\r\n                className={classes.input}\r\n                value={value}\r\n                onChange={event =>\r\n                    dispatch(contactsActions.changeFilter(event.target.value))\r\n                }\r\n                autoComplete=\"off\"\r\n            />\r\n        </label>\r\n    );\r\n};\r\n\r\nexport default Filter;\r\n\r\n\r\n\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n\r\n// const mapStateToProps = state => ({\r\n//     value: state.contacts.filter,\r\n// })\r\n\r\n// const mapDispatchToProps = dispatch => {\r\n//     return {\r\n//         onChange: (e) => dispatch(chengeFilter(e.currentTarget.value)),\r\n//     }\r\n// }","import { useDispatch } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {deleteContact} from '../../redux/contacts/contact-operations';\r\n\r\n\r\nimport styles from './ContactItem.module.scss';\r\n\r\n\r\n\r\nconst ContactItem = ({ name, number, id }) => {\r\n\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <>\r\n           \r\n            <span className={styles.name}>{name}:</span>\r\n            <span className={styles.number}>{number}</span>\r\n            <button\r\n                type=\"button\"\r\n                className={styles.deleteButton}\r\n                onClick={() => dispatch(deleteContact(id))}\r\n            >\r\n                Delete\r\n            </button>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ContactItem;\r\n\r\nContactItem.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    number: PropTypes.string.isRequired,\r\n    id: PropTypes.number.isRequired,\r\n};\r\n\r\n\r\n// const mapDispatchToProps = dispatch => {\r\n//     return {\r\n//         onDeleteContact: id => dispatch(deleteContact(id))\r\n//     }\r\n// };","import { useSelector } from 'react-redux';\r\nimport { getVisibleContacts } from '../../redux/contacts/contact-selectors';\r\nimport ContactItem from '../ContactItem';\r\n// import { connect } from 'react-redux';\r\n\r\nimport styles from './ContactList.module.scss';\r\n\r\n\r\n\r\n\r\nconst ContactList = () => {\r\n    \r\n    const contacts = useSelector(getVisibleContacts);\r\n    \r\n    return (\r\n        <ul className={styles.list}>\r\n            {contacts.map(({ id, name, number }) => (\r\n                <li key={id} className={styles.listItem}>\r\n                    <ContactItem name={name} number={number} id={id} />\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default ContactList;\r\n\r\n\r\n\r\n\r\n// export default connect(mapStateToProps)(ContactList);\r\n\r\n// const mapStateToProps = ({ contacts: { items, filter } }) => ({\r\n//     contacts: getVisibleContacts(items, filter),\r\n// });","import Loader from 'react-loader-spinner';\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\r\nimport styles from './Loader.module.scss'\r\n\r\nconst LoaderContacts = () => {\r\n  return(\r\n    <div className={styles.loading}>\r\n      <Loader\r\n        type=\"ThreeDots\"\r\n        color=\"#FF1493\"\r\n        height={80}\r\n        width={80}\r\n        timeout={2000}\r\n      />\r\n    </div>\r\n  )\r\n};\r\n\r\n\r\nexport default LoaderContacts;","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {getContacts, getLoading } from './redux/contacts/contact-selectors';\nimport {fetchContacts} from './redux/contacts/contact-operations';\n\nimport Container from './components/Container';\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\nimport ContactList from './components/ContactList';\nimport Loader from './components/Loader';\n\nconst App = () => {\n    const contacts = useSelector(getContacts);\n    const loading = useSelector(getLoading);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n\n\n    return (\n    <Container>\n        <h1>Phonebook</h1>\n        <ContactForm />\n\n        <h2>Contacts</h2>\n        {loading && <Loader />}\n        {contacts.length > 0 \n        ? (\n        <>\n         <Filter />\n         <ContactList />\n        </>\n        )\n        : (<p>No contacts</p>)}\n       \n    </Container>\n    )\n};\n\nexport default App;","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n// import * as contactsActions from './contact-actions';\r\nimport {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  changeFilter\r\n} from './contact-actions';\r\n// import { fetchContacts, addContact, deleteContact } from './contact-operations';\r\n\r\n// const initialState = [];\r\nconst itemsReducer = createReducer([], {\r\n  [fetchContactsSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => [payload, ...state],\r\n  [deleteContactSuccess]: (state, { payload }) =>\r\n         state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filterReducer = createReducer('', {\r\n  [changeFilter]: (_, action) => action.payload.trim(),\r\n});\r\n\r\nconst LoadingReducer = createReducer(false, {\r\n  [fetchContactsRequest]: () => true,\r\n  [fetchContactsSuccess]: () => false,\r\n  [fetchContactsError]: () => false,\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n});\r\n\r\n\r\n\r\n\r\n// const itemsReducer = createReducer([], {\r\n//     [fetchContacts.fulfilled]: (_, { payload }) => payload,\r\n//     [addContact.fulfilled]: (state, { payload }) => [payload, ...state],\r\n//     [deleteContact.fulfilled]: (state, { payload }) =>\r\n//         state.filter(({ id }) => id !== payload),\r\n// });\r\n\r\n\r\n// const filterReducer = createReducer('', {\r\n//     [changeFilter]: (_, { payload }) => payload,\r\n// });\r\n\r\n// const LoadingReducer = createReducer(false, {\r\n//     [fetchContacts.pending]: () => true,\r\n//     [fetchContacts.fulfilled]: () => false,\r\n//     [fetchContacts.rejected]: () => false,\r\n//     [addContact.pending]: () => true,\r\n//     [addContact.fulfilled]: () => false,\r\n//     [addContact.rejected]: () => false,\r\n//     [deleteContact.pending]: () => true,\r\n//     [deleteContact.fulfilled]: () => false,\r\n//     [deleteContact.rejected]: () => false,\r\n// })\r\n\r\n\r\nconst contactsReducer = combineReducers({\r\n    items: itemsReducer,\r\n    filter: filterReducer,\r\n    loading: LoadingReducer,\r\n});\r\n\r\nexport default contactsReducer;","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER,\r\n} from 'redux-persist';\r\nimport contactsReducer from './contacts/contact-reducers';\r\n\r\n\r\nconst middleware = [\r\n    ...getDefaultMiddleware({\r\n        serializableCheck: {\r\n            ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n        },\r\n    }),\r\n    logger,\r\n];\r\n\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        contacts:  contactsReducer\r\n        },\r\n    middleware,\r\n    devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport './index.css';\nimport 'modern-normalize/modern-normalize.css';\nimport App from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n                <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);"],"sourceRoot":""}